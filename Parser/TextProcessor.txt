import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Pattern;
import java.util.regex.Matcher;


public class TextProcessor {

	private File file;
	
	public TextProcessor() {
		// TODO Auto-generated constructor stub
	}
	
	public TextProcessor(String filename){
		loadFile(filename);
	}
	
	public boolean loadFile(String name){
		boolean rval = true;
		file = new File(name);
		try{
			Scanner scan = new Scanner(file);
			scan.close();
		} catch (FileNotFoundException e){
			System.out.print("File " + name + " not found.");
			rval = false;
		} 
		return rval;
	}
	
	/*
	 * The following methods process an input text and check for various bad habits or errors
	 * The checks performed are as follows:
	 * 
	 * checkScanner(): This method checks the code for open scanners. It does this by parsing through the code and identifying
	 * all opened scanners by name. It then checks for instances where .close is called from those same scanners.
	 * If a scanner is declared, but no .close() is found to be called from that scanner, then the method will end by 
	 * displaying a message noting that the scanner was opened, but not closed. Additionally, the line on which the scanner is first opened
	 * will be displayed.
	 * 
	 * checkBracketCount(): This method checks for open brackets, quotes and apostrophes. The methodology is similar to checkScanner.
	 * If the method finds one of the possible brackets it's searching for, it adds the lineIndex to a list, and removes the line index 
	 * of the last instance if it finds a closed bracket. In the case of quotes and apostrophes, it keeps the line number as an integer,
	 * resetting it if it ever finds a second instance (which would indicate the closing of quotes or apostrophes)
	 * Note that this method ONLY checks the count, so it will not find cases where {} is used where [] should be used, or where "" is used
	 * instead of '', etc. This requires an additional method.
	 * 
	 * checkBracketMatch(): This method finds instances where '(','{','[' are mismatched. It does this by keeping a list of opened brackets in
	 * LIFO order, and then checking the last element anytime a bracket is closed. If a mismatch is found, the error is noted, and the last 
	 * bracket removed, to avoid showing one bracket mismatching with multiple others at once.
	 * 
	 * checkBadSemiColon(): This method finds occurrences of semi-colons immediately following a conditional (if) statement, or a loop declaration.
	 * It does this by finding if statements and loop declarations, and then checking if the next character is a semi-colon. checking the next character is 
	 * sufficient if all whitespaces are removed from the line first.
	 */
	public int checkScanner(){
		int open = 0;
		List<String> scanners = new ArrayList<String>();
		List<Integer> scannersPos = new ArrayList<Integer>();
		int errorCount = 0;
		
		try{
			Scanner scan = new Scanner(file);
			int lineIndex = 0;
			while(scan.hasNextLine()){
				String line = scan.nextLine();
				Pattern pattern = Pattern.compile("(?![Scanner ]).*(?==)");
				if(line.contains("new Scanner")){
					Matcher matcher = pattern.matcher(line);
					if(matcher.find()){
						scanners.add(matcher.group(0).replace("Scanner","").trim()); //sometimes, the capture group contains the full declaration, which we don't need, so we chop it away here.
						scannersPos.add(lineIndex);
						open++;
					}
				}
				int[] removals = new int[scanners.size()];
				int j = 0;
				for(int i = 0; i < scanners.size(); i++){
					pattern = Pattern.compile(scanners.get(0)+".close()");
					Matcher matcher = pattern.matcher(line);
					if(matcher.find()){
						removals[j] = i;
						j++;
					}
				}
				for(int k = j-1; k >= 0; k--){
					scanners.remove(removals[k]);
					scannersPos.remove(removals[k]);
					open--;
				}
				lineIndex++;
			}
			scan.close();
		} catch (FileNotFoundException e){
			System.out.print("File not found.");
		} 
		for(int i = 0; i < scanners.size(); i++){
			System.out.println("Scanner " + scanners.get(i) + " on line "+ scannersPos.get(i) + " not closed");
			errorCount++;
		}
		return errorCount;
	}
	
	public int checkBracketCount(){
		ArrayList<Integer> parentheses = new ArrayList<Integer>();
		ArrayList<Integer> square = new ArrayList<Integer>();
		ArrayList<Integer> curly = new ArrayList<Integer>();
		int quote = 0;
		int apostrophe = 0;
		int errorCount =0;
		
		try{
			Scanner scan = new Scanner(file);
			int lineIndex = 1;
			boolean quoted = false;
			boolean commented = false;
			while(scan.hasNextLine()){
				String line = scan.nextLine();
				if(line.replaceAll("(\\s|\n)", "").startsWith("/*"))
					commented = true;
				if(line.replaceAll("(\\s|\n)", "").startsWith("*/") || line.replaceAll("(\\s|\n)", "").endsWith("*/"))
					commented = false;
				if(commented || line.replaceAll("(\\s|\n)", "").startsWith("//")){
					lineIndex++;
					continue;
				}
				for(int i = 0; i < line.length(); i++){
					switch(line.charAt(i)){
					case '(':
						if(quoted){
							break;
						}
						if(i != 0 && i != line.length()-1 && line.charAt(i-1) == '\'' && line.charAt(i+1) == '\''){
							break; //if the bracket is enclosed by apostrophes, it's a character
						}
						parentheses.add(lineIndex);
						break;
					case '[':
						if(quoted){
							break;
						}
						if(i != 0 && i != line.length()-1 && line.charAt(i-1) == '\'' && line.charAt(i+1) == '\''){
							break; //if the bracket is enclosed by apostrophes, it's a character
						}
						square.add(lineIndex);
						break;
					case '{':
						if(quoted){
							break;
						}
						if(i != 0 && i != line.length()-1 && line.charAt(i-1) == '\'' && line.charAt(i+1) == '\''){
							break; //if the bracket is enclosed by apostrophes, it's a character
						}
						curly.add(lineIndex);
						break;
					case ')':
						if(quoted){
							break;
						}
						if(i != 0 && i != line.length()-1 && line.charAt(i-1) == '\'' && line.charAt(i+1) == '\''){
							break; //if the bracket is enclosed by apostrophes, it's a character
						}
						if(parentheses.size() > 0)
							parentheses.remove(parentheses.size()-1);
						break;
					case ']':
						if(quoted){
							break;
						}
						if(i != 0 && i != line.length()-1 && line.charAt(i-1) == '\'' && line.charAt(i+1) == '\''){
							break; //if the bracket is enclosed by apostrophes, it's a character
						}
						if(square.size() > 0)
							square.remove(square.size()-1);
						break;
					case '}':
						if(quoted){
							break;
						}
						if(i != 0 && i != line.length()-1 && line.charAt(i-1) == '\'' && line.charAt(i+1) == '\''){
							break; //if the bracket is enclosed by apostrophes, it's a character
						}
						if(curly.size() > 0)
							curly.remove(curly.size()-1);
						break;
					case '"':
						if(i != 0 && line.charAt(i-1) == '\\')
							break;
						else if (i != 0 && i != line.length() && line.charAt(i-1) == '\'' && line.charAt(i+1) == '\'')
							break;
						if(quote == 0){
							quote = lineIndex;
						} else {
							quote = 0;
						}
						quoted = !quoted;
						break;
					case '\'':
						if(i != 0 && line.charAt(i-1) == '\\')
							break;
						else if(apostrophe == 0)
							apostrophe = lineIndex;
						else
							apostrophe = 0;
						break;
						
					}
				}
				lineIndex++;
			}
			for(int i = 0; i < parentheses.size(); i++){
				System.out.println("Unclosed parentheses on line " + parentheses.get(i));
				errorCount++;
			}
			for(int i = 0; i < square.size(); i++){
				System.out.println("Unclosed square brackets on line " + square.get(i));
				errorCount++;
			}
			for(int i = 0; i < curly.size(); i++){
				System.out.println("Unclosed curly brace on line " + curly.get(i));
				errorCount++;
			}
			
			if(quote != 0){
				System.out.println("Unclosed quotation marks on line " + quote);
				errorCount++;
			}
			
			if(apostrophe != 0){
				System.out.println("Unclosed apostrophes on line " + apostrophe);
				errorCount++;
			}
			scan.close();
		} catch (FileNotFoundException e){
			System.out.print("File not found.");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return errorCount;
	}

	public int checkBracketMatch(){
		ArrayList<Character> lastBracket = new ArrayList<Character>();
		ArrayList<Integer> lastBracketIndex = new ArrayList<Integer>();
		ArrayList<String> errors = new ArrayList<String>();
		try{
			Scanner scan = new Scanner(file);
			int lineIndex = 1;
			boolean quoted = false;
			boolean commented = false;
			while(scan.hasNextLine()){
				String line = scan.nextLine();
				if(line.replaceAll("(\\s|\n)", "").startsWith("/*"))
					commented = true;
				if(line.replaceAll("(\\s|\n)", "").startsWith("*/") || line.replaceAll("(\\s|\n)", "").endsWith("*/"))
					commented = false;
				if(commented || line.replaceAll("(\\s|\n)", "").startsWith("//")){
					lineIndex++;
					continue;
				}
				for(int i = 0; i < line.length(); i++){
					switch(line.charAt(i)){
					case '\"':
						if(i > 0 &&  i < line.length() && line.charAt(i-1) == '\'' && line.charAt(i+1) != '\''){
							break;
						}
						quoted = !quoted;
						break;
					case '(':
						if(quoted){
							break;
						}
						if(i != 0 && i != line.length()-1 && line.charAt(i-1) == '\'' && line.charAt(i+1) == '\''){
							break; //if the bracket is enclosed by apostrophes, it's a character
						}
						lastBracket.add('(');
						lastBracketIndex.add(lineIndex);
						break;
					case '[':
						if(quoted){
							break;
						}
						if(i != 0 && i != line.length()-1 && line.charAt(i-1) == '\'' && line.charAt(i+1) == '\''){
							break; //if the bracket is enclosed by apostrophes, it's a character
						}
						lastBracket.add('[');
						lastBracketIndex.add(lineIndex);
						break;
					case '{':
						if(quoted){
							break;
						}
						if(i != 0 && i != line.length()-1 && line.charAt(i-1) == '\'' && line.charAt(i+1) == '\''){
							break; //if the bracket is enclosed by apostrophes, it's a character
						}
						lastBracket.add('{');
						lastBracketIndex.add(lineIndex);
						break;
					case ')':
						if(quoted){
							break;
						}
						if(i != 0 && i != line.length()-1 && line.charAt(i-1) == '\'' && line.charAt(i+1) == '\''){
							break; //if the bracket is enclosed by apostrophes, it's a character
						}
						if(lastBracket.size() > 0 &&lastBracket.get(lastBracket.size()-1) != '('){
							/*
							 * If the found closing bracket does not match the bracket type of the last opening bracket, we have a mismatch.
							 * In this case, note the mismatch, and remove the last bracket from the list of brackets.
							 * Note that, in the case of a bracket miscount, this may result in all subsequent brackets being mismatched.
							 */
							errors.add("Bracket Mismatch: " + lastBracket.get(lastBracket.size()-1) + " matching with ')' on line " + lastBracketIndex.get(lastBracketIndex.size()-1) + " and line " + lineIndex);
						}
						if(lastBracket.size() > 0){
							lastBracket.remove(lastBracket.size()-1);
							lastBracketIndex.remove(lastBracketIndex.size()-1);	
						}
						break;
					case ']':
						if(quoted){
							break;
						}
						if(i != 0 && i != line.length()-1 && line.charAt(i-1) == '\'' && line.charAt(i+1) == '\''){
							break; //if the bracket is enclosed by apostrophes, it's a character
						}
						if(lastBracket.size() > 0 &&lastBracket.get(lastBracket.size()-1) != '['){
							errors.add("Bracket Mismatch: " + lastBracket.get(lastBracket.size()-1) + " matching with ']' on line " + lastBracketIndex.get(lastBracketIndex.size()-1)  + " and line " + lineIndex );
						}
						if(lastBracket.size() > 0){
							lastBracket.remove(lastBracket.size()-1);
							lastBracketIndex.remove(lastBracketIndex.size()-1);	
						}
						break;
					case '}':
						if(quoted){
							break;
						}
						if(i != 0 && i != line.length()-1 && line.charAt(i-1) == '\'' && line.charAt(i+1) == '\''){
							break; //if the bracket is enclosed by apostrophes, it's a character
						}
						if(lastBracket.size() > 0 && lastBracket.get(lastBracket.size()-1) != '{'){
							errors.add("Bracket Mismatch: " + lastBracket.get(lastBracket.size()-1) + "matching with '}' on line " + lastBracketIndex.get(lastBracketIndex.size()-1)  + " and line " + lineIndex);
						}
						if(lastBracket.size() > 0){
							lastBracket.remove(lastBracket.size()-1);
							lastBracketIndex.remove(lastBracketIndex.size()-1);	
						}
						break;
					}
				}
				lineIndex++;
			}
			scan.close();
		} catch (FileNotFoundException e){
			System.out.print("File not found.");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		for(int i =0; i < errors.size(); i++){
			System.out.println(errors.get(i));
		}
		return errors.size();
	}
	
	public int checkBadSemiColon(){
		
		ArrayList<String> errors = new ArrayList<String>();
		try{
			Scanner scan = new Scanner(file);
			int lineIndex = 0;
			while(scan.hasNextLine()){
				String line = scan.nextLine().replaceAll("(\\s|\n)", ""); //removes all whitespace characters and newlines within a line (there shouldn't be any newlines anyway)
				Pattern patternIf = Pattern.compile("if\\(.*\\)"); //finds if statements.
				Matcher matcherIf = patternIf.matcher(line);
				if(matcherIf.find()){
					for(int i = 0; i <= matcherIf.groupCount(); i++){
						int nextidx = line.indexOf(matcherIf.group(i))+matcherIf.group(i).length(); //finds the index of the first character after the matching group.
						if(line.length() > nextidx && line.charAt(nextidx) == ';'){
							errors.add("Semi-colon after conditional statement on line "+lineIndex);
							
						}
					}					
				}
				Pattern patternLoop = Pattern.compile("(for\\(.*\\)|while\\(.*\\))"); //finds while and for loops
				Matcher matcherLoop = patternLoop.matcher(line);
				if(matcherLoop.find()){
					for(int i = 0; i <= matcherLoop.groupCount(); i++){
						if(i != 0 && matcherLoop.group(i).equals(matcherLoop.group(i-1))){
							lineIndex++;
							continue; //skips any groups that were mistakenly matched more than once.
						}
						int nextidx = line.indexOf(matcherLoop.group(i))+matcherLoop.group(i).length();
						String looptype = "";
						if(line.charAt(line.indexOf(matcherLoop.group(i))) =='f')
							looptype = "for";
						else if(line.charAt(line.indexOf(matcherLoop.group(i))) =='w')
							looptype = "while";
						if(line.charAt(nextidx) == ';'){
							errors.add("Semi-colon after " + looptype +" loop declaration on line "+lineIndex);
						}
					}
				}
				lineIndex++;
			}
			scan.close();
		} catch (FileNotFoundException e){
			System.out.print("File not found.");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		for(int i = 0; i <errors.size(); i++){
			System.out.println(errors.get(i));
		}
		return errors.size();
		
	}

	public int checkAssignment(){
		int errorCount = 0;
		ArrayList<String> errors = new ArrayList<String>();
		ArrayList<String> vars = new ArrayList<String>();
		
		try{
			Scanner scan = new Scanner(file);
			int lineIndex = 0;
			boolean commented = false;
			while(scan.hasNextLine()){
				String line = scan.nextLine();
				if(line.replaceAll("(\\s|\n)", "").startsWith("/*"))
					commented = true;
				if(line.replaceAll("(\\s|\n)", "").startsWith("*/") || line.replaceAll("(\\s|\n)", "").endsWith("*/"))
					commented = false;
				if(commented || line.replaceAll("(\\s|\n)", "").startsWith("//")){
					lineIndex++;
					continue;
				}
				if(line.contains("=")){
					System.out.println(line);
					/*
					 * This part is a big boolean statement that checks whether or not this should be a comparison operator, rather than an assignment operator
					 * we do this one first because it's way more common to use '=' in place of '==' than it is to do the other way around.
					 */
					boolean bool;
				}
				lineIndex++;
			}
		} catch (FileNotFoundException e){
			System.out.print("File not found.");
		} 
		for(int i = 0; i < errors.size(); i++){
			System.out.println("");
			errorCount++;
		}
		return errorCount;
	}
}
